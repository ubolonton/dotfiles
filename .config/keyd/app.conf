# The mappings below are specified using QWERTY labels. The meanings in Dvorak are either mnemonic,
# or positional.

# Mappings are applied once, not iteratively, so we can map `s-t` to `C-t`, for `new-tab`, while
# mapping `C-t` to something else. (Or just swap them.)

# --------------------------------------------------------------------

# Mostly undo some global remappings for GUI Emacs and terminal emulators, so that Emacs, shells,
# and CLI/TUI programs can handle the key bindings on their own.

[konsole]
alt+shift.u = A-S-u
alt+shift.o = A-S-o
alt.e = A-e
control.u = C-u
meta./ = M-/
meta.b = M-b
meta.i = M-i
meta.. = M-.
meta.a = M-a
meta.l = M-l
meta.s = M-s
meta.; = M-;
meta.r = M-r

[kitty]
# ⇤ ⇥
alt.h = C-a
alt+shift.h = C-d
# ⇱ ⇲
alt+shift.u = A-S-u
alt+shift.o = A-S-o
# ⌥⌫ ⌥⌦
alt.e = A-e
alt.r = A-r
# C-g
control.u = C-u
meta./ = M-/
meta.b = M-b
meta.i = M-i
meta.. = M-.
meta.a = M-a
meta.l = M-l
meta.s = M-s
meta.; = M-;
meta.r = M-r

[emacs]
# ⇱ ⇲
alt+shift.u = A-S-u
alt+shift.o = A-S-o
alt.e = A-e
# C-g
control.u = C-u
alt+control.o = A-C-o
meta./ = M-/
meta.b = M-b
meta.i = M-i
meta.. = M-.
meta.a = M-a
meta.l = M-l
meta.s = M-s
meta.; = M-;
meta.r = M-r

# --------------------------------------------------------------------

[firefox]
# s-l open-location
meta.p = C-p
# s-t new-tab
meta.k = C-k
# s-T restore-closed-tab
meta+shift.k = C-S-k
# s-w s-k close-tab
meta.v = C-,
meta., = C-,
# s-f search
meta.y = C-y
# s-r refresh
meta.o = C-o
meta+shift.o = M-S.o
# s-+ s-- zoom-in zoom-out
meta.] = C-]
meta.' = C-'
# # s-A manage-extensions-and-addons
# meta+shift.a = C-S-a
# s-q quit
meta.x = C-x
meta.0 = A-0
meta.1 = A-1
meta.2 = A-2
meta.3 = A-3
meta.4 = A-4
meta.5 = A-5
meta.6 = A-6
meta.7 = A-7
meta.8 = A-8
meta.9 = A-9
# s-h -> C-k ("command panel" convention on many sites).
meta.j = C-v
# M-d
alt.h = home
# M-D
alt+shift.h = end
# C-M-h
alt+control.j = C-S-tab
# C-M-n
alt+control.l = C-tab
# history-back history-forward s-[ s-] s-left s-right
meta.- = C--
meta.= = C-=
meta.left = A-left
meta.right = A-right
alt+meta.j = A-left
alt+meta.l = A-right
# M-i kill-line
alt.g = macro(C-S-end backspace)
# M-I kill-whole-line
alt+shift.g = macro(C-end C-f)

[thunar]
alt.h = home
alt+shift.h = end
# # macOS s-{z,x,c,v,a,n}
# meta./ = C-/
# meta.b = C-b
# meta.i = C-i
# meta.. = C-.
# meta.a = C-a
# meta.l = C-l
# s-k close-window
meta.v = A-f4
# s-l open-location
meta.p = C-p
# s-t new-tab
meta.k = C-k
# s-k close-tab
meta.v = C-,
# s-f search
meta.y = C-y
alt+control.k = enter
# meta.1 = C-1
# meta.2 = C-2
# meta.3 = C-3

[dolphin]
alt.h = home
alt+shift.h = end

# --------------------------------------------------------------------

[discord]
# s-h -> C-k ("command panel")
meta.j = C-v

# FIX: keyd-application-mapper bug
# XXX: jetbrains-idea
[focusproxy]
# https://stackoverflow.com/questions/32921994/how-to-make-windows-key-the-intellij-idea-command-meta-key-under-windows
meta./ = M-/
meta.b = M-b
meta.i = M-i
meta.. = M-.
meta.a = M-a
meta.l = M-l
meta.s = M-s
meta.; = M-;
meta.r = M-r
meta.d = M-d
# s-h s-H
meta.j = M-S-s
meta+shift.j = M-S-y
# s-k
meta.v = M-,
# ⇷ ⇸
alt.u = A-left
alt.o = A-right
# ⇤ ⇥
alt.h = C-a
alt+shift.h = C-d
# backward-paragraph forward-paragraph
alt+shift.j = A-S-j
alt+shift.l = A-S-l
# ⌥⌫ ⌥⌦
alt.e = A-backspace
alt.r = A-delete
# ^K ^U
alt.g = C-v
alt+shift.g = M-backspace

[code]
# s-q
meta.x = C-x
# ⇤ ⇥
alt.h = home
alt+shift.h = end
# ⇱ ⇲
alt+shift.u = C-home
alt+shift.o = C-end
# backward-paragraph forward-paragraph
alt+shift.j = A-S-j
alt+shift.l = A-S-l
