# vim:fileencoding=utf-8:foldmethod=marker

enable_audio_bell no

macos_hide_titlebar yes
# hide_window_decoration yes

font_family Fira Code Light
font_size 12
# # MBP monitor
# window_margin_width 0 4 0
# modify_font cell_height 108%
# Mi minotir
window_margin_width 0 5 0
modify_font cell_width 92%
modify_font cell_height 108%

foreground #cfd2d0
background #26292c
# background_opacity 0.5

# black
color0 #000000
# red
color1 #d77b79
# green
color2 #c1c67a
# yellow
color3 #f3cf86
# blue
color4 #92b1c9
# magenta
color5 #c0a6c7
# cyan
color6 #9ac8c3
# white
color7 #fffefe

cursor_blink_interval 0

tab_bar_edge top
tab_bar_style slant

macos_option_as_alt yes

# TODO: Assume meta+arrows bindings are already translated by the lower layer (e.g. keyd/Karabiner).
map alt+0x7e send_text all \x0fp
map alt+0x7d send_text all \x0fn
map alt+ctrl+h previous_tab
map alt+ctrl+n next_tab

map alt+up send_text all \x0fp
map alt+down send_text all \x0fn
map alt+left previous_tab
map alt+right next_tab

map alt+l send_text all ls\r

# Send `C-x @ s` for command modifier (like what Konsole does). This allows terminal Emacs to use super modifier.
map cmd+a send_text all \x18@sa
map cmd+b send_text all \x18@sb
map cmd+c send_text all \x18@sc
map cmd+d send_text all \x18@sd
map cmd+e send_text all \x18@se
map cmd+f send_text all \x18@sf
map cmd+g send_text all \x18@sg
map cmd+h send_text all \x18@sh
map cmd+i send_text all \x18@si
map cmd+j send_text all \x18@sj
map cmd+k send_text all \x18@sk
map cmd+l send_text all \x18@sl
map cmd+m send_text all \x18@sm
map cmd+n send_text all \x18@sn
map cmd+o send_text all \x18@so
map cmd+p send_text all \x18@sp
map cmd+q send_text all \x18@sq
map cmd+r send_text all \x18@sr
map cmd+s send_text all \x18@ss
map cmd+t send_text all \x18@st
map cmd+u send_text all \x18@su
map cmd+v send_text all \x18@sv
map cmd+w send_text all \x18@sw
map cmd+x send_text all \x18@sx
map cmd+y send_text all \x18@sy
map cmd+z send_text all \x18@sz
map cmd+0 send_text all \x18@s0
map cmd+1 send_text all \x18@s1
map cmd+2 send_text all \x18@s2
map cmd+3 send_text all \x18@s3
map cmd+4 send_text all \x18@s4
map cmd+5 send_text all \x18@s5
map cmd+6 send_text all \x18@s6
map cmd+7 send_text all \x18@s7
map cmd+8 send_text all \x18@s8
map cmd+9 send_text all \x18@s9
map cmd+shift+a send_text all \x18@sA
map cmd+shift+b send_text all \x18@sB
map cmd+shift+c send_text all \x18@sC
map cmd+shift+d send_text all \x18@sD
map cmd+shift+e send_text all \x18@sE
map cmd+shift+f send_text all \x18@sF
map cmd+shift+g send_text all \x18@sG
map cmd+shift+h send_text all \x18@sH
map cmd+shift+i send_text all \x18@sI
map cmd+shift+j send_text all \x18@sJ
map cmd+shift+k send_text all \x18@sK
map cmd+shift+l send_text all \x18@sL
map cmd+shift+m send_text all \x18@sM
map cmd+shift+n send_text all \x18@sN
map cmd+shift+o send_text all \x18@sO
map cmd+shift+p send_text all \x18@sP
map cmd+shift+q send_text all \x18@sQ
map cmd+shift+r send_text all \x18@sR
map cmd+shift+s send_text all \x18@sS
map cmd+shift+t send_text all \x18@sT
map cmd+shift+u send_text all \x18@sU
map cmd+shift+v send_text all \x18@sV
map cmd+shift+w send_text all \x18@sW
map cmd+shift+x send_text all \x18@sX
map cmd+shift+y send_text all \x18@sY
map cmd+shift+z send_text all \x18@sZ

# Arrows get mapped into sequences. Emacs's `C-x @ s` expects individual keys, not sequences. So we
# use positional M-s- instead. That requires custom `C-x @ @ M s` in Emacs's local-function-key-map.
map cmd+left send_text all \x18@@Msh
map cmd+right send_text all \x18@@Msn
map cmd+up send_text all \x18@@Msc
map cmd+down send_text all \x18@@Mst

# map cmd+ctrl+h send_text all \x18@@csh
# map cmd+ctrl+n send_text all \x18@@csn
# map cmd+ctrl+c send_text all \x18@@csc
# map cmd+ctrl+t send_text all \x18@@cst

# TODO: cmd+control

# map cmd+h no_op

# Map our conventions to readline/zsh, so we can reduce the number of key bindings in ~/.inputrc and
# ~/.zshrc. More importantly, this is so that the shortcuts work in programs that follow readline
# conventions but don't use readline directly.
#
# When the translated shortcuts are also used *differently* in Emacs, we do a tranposition instead,
# so that Emacs can later on undo them. For example, M-g <-> M-b.
#
# backward-word
# M-g <-> M-b
map alt+g send_text all \x1b\x62
map alt+b send_text all \x1b\x67
# forward-word
# M-r <-> M-f
map alt+r send_text all \x1b\x66
map alt+f send_text all \x1b\x72
# backward-kill-word
# M-. <-> C-w
map alt+. send_text all \x17
map ctrl+w send_text all \x1b\x77
# forward-kill-word
# M-p -> M-d
#
# We don't transpose here, since M-d got translated into system-specific begining-of-line by the
# lower layer (keyd, Karabiner) already.
map alt+p send_text all \x1b\x64
# kill-line (to the end)
# M-i -> C-k
#
# We use both shortcuts for the same thing, so no need for transposition here.
map alt+i send_text all \x0b
# readline: unix-line-discard (to the beginning only)
# zsh: kill-whole-line
# M-I <-> C-u
map alt+shift+i send_text all \x15
map ctrl+u send_text all \x1b\x49
